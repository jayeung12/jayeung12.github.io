library(jsonlite)
 bedfile= read.table("C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)/MicroGNL-23_WA1coords.txt",skip=1, sep="\t",stringsAsFactors=FALSE, quote="")
genes= read.table("C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)/NC_045512.2_genes.BED", sep="\t",stringsAsFactors=FALSE, quote="")

bedfile= read.table("C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Meeting_(Week_of_11_29_21)/Virus_Recombination_Results.BED",skip=1, sep="\t",stringsAsFactors=FALSE, quote="")
genes= read.table("C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Meeting_(Week_of_11_29_21)/genes.BED", sep="\t",stringsAsFactors=FALSE, quote="")

 
exampleJSON= jsonlite:: toJSON(bedfile)
write(exampleJSON, "C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)/MicroGNL-23_WA1coords.json")   

structJSON=list(virus="SARS-CoV2" %>% unbox,strain="Delta" %>% unbox,V1=bedfile$V1,V2=bedfile$V2,V3=bedfile$V3,V4=bedfile$V4,V5=bedfile$V5,V6=bedfile$V6,V7=bedfile$V7,V8=bedfile$V8,V9=bedfile$V9,V10=bedfile$V10) %>% jsonlite::toJSON()
write(structJSON, "C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)/MicroGNL-23_WA1coords.json")   


bedfile= read.table("C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)/MicroGNL-48_WA1coords.txt",skip=1, sep="\t",stringsAsFactors=FALSE, quote="")

exampleJSON= jsonlite:: toJSON(bedfile)
write(exampleJSON, "C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)/MicroGNL-48_WA1coords.json")   

structJSON=list(virus="SARS-CoV2" %>% unbox(),strain="Delta" %>% unbox(),V1=bedfile$V1,V2=bedfile$V2,V3=bedfile$V3,V4=bedfile$V4,V5=bedfile$V5,V6=bedfile$V6,V7=bedfile$V7,V8=bedfile$V8,V9=bedfile$V9,V10=bedfile$V10) %>% jsonlite::toJSON(.,asIs=T)
write(structJSON, "C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)/MicroGNL-48_WA1coords.json")   

filenames <- list.files("C:/Users/jason/Documents/Projects/Routh Lab/RE__ViReMa_Dashboard_Prototype_(10_28_21)", pattern="*.txt", full.names=TRUE)
filelist = list()
for(i in 1:length(filenames)){
  filelist[[i]] =   read.table(filenames[i],skip=1, sep="\t",stringsAsFactors=FALSE, quote="")
}
boundDF = do.call(rbind, filelist) %>% group_by(V2,V3,V4) %>% mutate(V11=n()) %>% mutate(V5=sum(V5 %>% as.numeric()))


n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
                x = rnorm(n), y = runif(n))

bed1 = generateRandomBed(nr = 100)
bed1 = bed1[sample(nrow(bed1), 20), ]
bed2 = generateRandomBed(nr = 100)
bed2 = bed2[sample(nrow(bed2), 20), ]
circos.initializeWithIdeogram()
circos.genomicLink(bed1[,1:2], bed2[,1:2], col = rand_color(nrow(bed1), transparency = 0.5), 
                   border = NA)

b1=bedfile %>% select(V1,V2)
b2=bedfile %>% select(V1,V3)

genes$V2
genes$V3


genes$row=NA
genes$row[1]=1

genesOrd=genes %>% select(V1,V2,V3,V4,row) %>% arrange(V2)
for(i in 2:nrow(genesOrd)){

  noOverlaps=genesOrd %>% na.omit %>% group_by(row) %>% mutate(Overlap=any( V3+400 >= genesOrd$V2[i] ) ) %>% filter(Overlap==F) %>% na.omit%>% arrange(row,desc())
  
  if(nrow(noOverlaps!=0)){
    genesOrd$row[i]=noOverlaps$row[1]
  }else{
    genesOrd$row[i]=max(genesOrd$row,na.rm = T)+1
  }
    
}
genesOrd$row[1]=1

genesOrd$row


scaling=100/max(genesOrd$row,na.rm = T)


circos.par("track.height" = 0.2)
circos.initialize(sectors =  bedfile$V1,bedfile$V3)
circos.track(ylim = c(1,120),
             panel.fun = function(x, y) {
              
               # circos.rect(genes$V2, (genesOrd$row-1)*scaling, genes$V3, genesOrd$row*scaling,col="#FF0000")
               circos.axis(labels.cex = 0.6)
               circos.genomicLink(b1,b2,col = add_transparency("black", 0.95), arr.type = "triangle",directional = 1,
               border = NA)
             })
for(i in 1:length(unique(genes$V1)) )
{
  seqs=genesOrd %>% filter(V1==unique(genesOrd$V1)[i])
  circos.rect(sector.index = seqs$V1[1], seqs$V2, (seqs$row-1)*scaling, seqs$V3, seqs$row*scaling,col="#FF0000")
  circos.text(sector.index = seqs$V1[1], x=(seqs$V2+seqs$V3)/2, y=((seqs$row-1)*scaling)+20, seqs$V4, cex=.6, facing = "bending.inside")
  
}


circos.rect(sector.index ="NC_004144_FHV_RNA2.seq" ,genes$V2, (genesOrd$row-1)*scaling, genes$V3, genesOrd$row*scaling,col="#FF0000")
circos.trackPoints(bedfile$V1, bedfile$V3, bedfile$V7, col = "#FF0000", pch = 16, cex = 0.5)


tp_family = readRDS(system.file(package = "circlize", "extdata", "tp_family_df.rds"))[]
circos.genomicInitialize(tp_family)
library(circlize)
        circos.track(ylim = c(0, 1), 
             bg.col = c("#FF000040", "#00FF0040", "#0000FF40"), 
             bg.border = NA, track.height = 0.05)
n = max(tapply(tp_family$transcript, tp_family$gene, function(x) length(unique(x))))
circos.genomicTrack(tp_family, ylim = c(0.5, n + 0.5), 
                    panel.fun = function(region, value, ...) {
                      all_tx = unique(value$transcript)
                      for(i in seq_along(all_tx)) {
                        l = value$transcript == all_tx[i]
                        # for each transcript
                        current_tx_start = min(region[l, 1])
                        current_tx_end = max(region[l, 2])
                        circos.lines(c(current_tx_start, current_tx_end), 
                                     c(n - i + 1, n - i + 1), col = "#CCCCCC")
                        circos.genomicRect(region[l, , drop = FALSE], ytop = n - i + 1 + 0.4, 
                                           ybottom = n - i + 1 - 0.4, col = "orange", border = NA)
                      }
                    }, bg.border = NA, track.height = 0.4)
}